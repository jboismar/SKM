<?php include('MyFunctions.inc.php');

if (isset($_GET["id"])) $id = $_GET["id"]; else $id = "";
if (isset($_POST["step"])) $step = $_POST["step"]; else $step = "";
if($step != '1')
{
  if (!empty($id))
  {
    // We modify an existing reminder
    $result = mysql_query( "SELECT * FROM `keys` where `id`='$id'" );
    $row = mysql_fetch_array( $result );
    $name = $row["name"];
    $key = $row["key"];
  }
  else 
  {
	  $name = "";
	  $key = "";
  }
?>

<html>
<HEAD>
  <TITLE>Key Setup</TITLE>
  <LINK REL=STYLESHEET HREF="skm.css" TYPE="text/css">
  <script src="/skm/jquery.min.js"></script>
</HEAD>
<body onload="page_loaded()">

<?php start_main_frame("<a href=\"show_all_hosts.php\"> SKM </a> > Adding keys"); ?>
<?php start_left_pane(); ?>
<?php display_menu(); ?>
<?php end_left_pane(); ?>
<?php start_right_pane(); ?>

    <form name="setup_key" action="keys_setup.php" onsubmit="return validate_form()" method="post">
    <fieldset><legend>Add / Modify a key</legend>
        <h5>SSH Key Description (owner)</h5>        
        <input name="name" id="Desc" size="50" type="text" maxlength="255" value="<?php echo("$name"); ?>"><br>      
        <h5>Paste the ssh public key here :</h5>        
        <textarea name="key" id="Key" cols="80" rows="10" style="resize:none" onkeyup="clean_ssh_key()"><?php echo("$key"); ?></textarea>
        <br>
        <h5>Or import the public key file here : </h5>
        <label for="file">Generated ssh key file : </label>
        <input type="file" name="file" id="file">        
        <br>
        <h5>This is the key (in OpenSSH format) that will be imported, is that correct ? </h5>
        <textarea name="key_cleaned" cols="80" rows="10" style="resize:none" onkeyup="check_ssh_key()"></textarea>        
        <br>
        <output id="key_fingerprint"></output>
        <br>
      </fieldset>
      <center>
      <input name="step" type="hidden" value="1">
      <input name="id" type="hidden" value="<?php echo("$id");?>">
      <input name="submit" type="submit" value="Add key">
      </center>
    </form>

<? end_right_pane(); ?>
<? end_main_frame(); ?>

</body>
</html>

<script>

  // this function is executed when the page is fully loaded
  function page_loaded() { 
    add_listeners();
    // if the page is in edit mode, we check the existing key immediately
    var key = document.forms["setup_key"]["Key"].value;
    if (key != null || key != "") {
      clean_ssh_key();
    }
  }

  // add the listener on the upload button to initate the upload javscript on click
  function add_listeners() {
    document.getElementById('file').addEventListener('change', handleFileSelect, false);    
  }

  // read public key file selected for upload, put its content in the key field
  // and launch the functions to clean and validate the imported key
  function handleFileSelect(evt) {
    var f = evt.target.files[0];
    var reader = new FileReader();
    reader.onload = (function(theFile) { // Closure to capture the file information.
      return function(e) {
        document.forms["setup_key"]["key"].value = e.target.result;  
        clean_ssh_key();    
      };
    })(f);
    reader.readAsText(f);
  }
  
  // check that all the required fields have been filled before adding a key to 
  // the database
  function validate_form() {
    var key_name = document.forms["setup_key"]["name"].value;
    if (key_name == null || key_name == "") {
        alert("The key description is empty !");
        return false;
    }
    var key = document.forms["setup_key"]["key"].value;
    if (key == null || key == "") {
      alert("Where is the key ?");
      return false;
    }
    var key_cleaned = document.forms["setup_key"]["key_cleaned"].value;
    if (key_cleaned == null || key_cleaned == "") {
      alert("Please check the SSH key before adding it !");
      return false;
    }
  }

  // Remove the whitespace in the key, and if the key was generated by putty,
  // we extract the values to format it in OpenSSH format. We then check the key
  // via the check_ssh_key function
  function clean_ssh_key() { 
     var key = document.forms["setup_key"]["Key"].value;
     var cleaned_key = key.replace(/(\r\n|\n|\r)/gm,"");

      // if the pasted of imported key was generated by putty, we need
      // to extract the fields
      if (key.match(/---- BEGIN SSH2 PUBLIC KEY ----/)) {       
        var match = cleaned_key.match(/(AAAAB3NzaC1yc2EA[\S\s]*=)/);        
        var extracted_key = match[0];

        var match = cleaned_key.match(/Comment:\s"(.*)"/);
        var extracted_comment = match[1];

        var cleaned_key = "ssh-rsa " + extracted_key + " " + extracted_comment;     
      }

      document.forms["setup_key"]["key_cleaned"].value = cleaned_key;
      check_ssh_key(cleaned_key);
  }

  // we use the ssh-keygen -lf command to valide the key, on the       
  // server side with the php system() call
  function check_ssh_key(key) {
    if (key == null || key == "") {
      key = document.forms["setup_key"]["key_cleaned"].value;
    }

    $.get('keys_validation.php?key=' + key.replaceAll('+', '%2B'), function(data) {                          
      document.getElementById('key_fingerprint').innerHTML = '<br><strong> Key fingerprint : ' 
        + data + '</strong><br><br>';
    });

  }

/**
 * ReplaceAll by Fagner Brack (MIT Licensed)
 * Replaces all occurrences of a substring in a string
 */
String.prototype.replaceAll = function( token, newToken, ignoreCase ) {
    var _token;
    var str = this + "";
    var i = -1;
    if ( typeof token === "string" ) {
        if ( ignoreCase ) {
            _token = token.toLowerCase();
            while( (
                i = str.toLowerCase().indexOf(
                    token, i >= 0 ? i + newToken.length : 0
                ) ) !== -1
            ) {
                str = str.substring( 0, i ) +
                    newToken +
                    str.substring( i + token.length );
            }
        } else {
            return this.split( token ).join( newToken );
        }
    }
return str;
};

</script>

<?php
}
else
{
  $error_list = "";
  if( empty( $error_list ) )
  {
    $id = $_POST['id'];
    if(empty($id)){
    // this is a new reminder
      $name = $_POST['name'];
      $key = $_POST['key_cleaned'];
      // No error let's add the entry
      mysql_query( "INSERT INTO `keys` (`name`, `key`) VALUES('$name','$key')" ) or die(mysql_error()."<br>Couldn't execute query: $query");
      // Let's go to the Reminder List page
      //if (empty($_POST['called']))
      //  header("Location:reminder_list.php");
      //else
      header("Location:keys.php");
      echo ("Reminder Added, redirecting...");
      exit ();
    } else {
      // We modify an existing reminder
      // setting the variable for the update
      $name = $_POST['name'];
      $key = $_POST['key_cleaned'];
      mysql_query( "UPDATE `keys` SET `name` = '$name', `key` = '$key' WHERE `id` = '$id' " );
      // Let's go to the Reminder List page
      header("Location:keys.php");
      echo ("Reminder Modified, redirecting...");
      exit ();
    }

  }
  else
  {
    // Error occurred let's notify it
    echo( $error_list );
  }
}
?>

